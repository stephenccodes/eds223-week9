---
title: "eds223-week9-lab"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
# Load packages
library(sf) # vector data
library(terra) # raster data
library(here) # file path management
library(tidyverse)
library(rpart) # recursive partitioning and regression trees
library(rpart.plot) # plotting for rpart
library(tmap) # map making
```

## Load landsat data

```{r}
# Import files
filelist <- list.files(here::here("data", "landsat-data"), full.names = TRUE)

landsat <- rast(filelist)

names(landsat) <- c("blue", "green", "red", "NIR", "SWIR1", "SWIR2")

plotRGB(landsat, r = 3, g = 2, b = 1, stretch = "lin")
```

## Load study area

```{r}
# Read in shapefile for porion of SB county
SB_county_south <- st_read(here("data", "SB_county_south.shp")) %>%
  st_transform(., crs = crs(landsat))

tm_shape(SB_county_south) +
  tm_borders()
```

## Crop & mask the landsat scene to the extent of the study area

```{r}

# crop Landsat scene to the extent of the SB county shapefile
landsat_cropped <- terra::crop(landsat, SB_county_south)

# Mask the raster to tthe study area
landsat_masked <- terra::mask(landsat_cropped, SB_county_south)

# Remove unnecessary object from environment
rm(landsat, SB_county_south, landsat_cropped)

plotRGB(landsat_masked, r = 3, g = 2, b = 1, stretch = "lin")
```

## Convert Landsat values to reflectance

```{r}
# reclassify erroneous values as NA
rcl <- matrix(c(-Inf, 7273, NA, # values between negative infinity and 7273 should be NA
                43636, Inf, NA), # values between 43636 and infinity should be NA
              ncol = 3, 
              byrow = TRUE)

landsat <- terra::classify(landsat_masked, rcl =rcl)

# Adjust values based on scaling factor
landsat <- (landsat * 0.0000275 - 0.2) * 100


# Check values are 0 - 100
summary(landsat)
```

## Training classifier

```{r}
# Read in training data
training_data <- st_read(here::here("data", "trainingdata.shp")) %>%
  st_transform(., crs = crs(landsat))
```

```{r}
# Extract reflectance values at training sites
training_data_values <- terra::extract(landsat, training_data, df = TRUE)

# Convert training data to data frame
training_data_attributes <- training_data %>%
  st_drop_geometry()

# Join training data attributes and extracted reflectance values
SB_training_data <- left_join(training_data_values, 
                               training_data_attributes, 
                               by = c("ID" = "id")) %>% 
                                mutate(type = as.factor(type)) # Convert landcover type to factor
```

```{r}
# Establisha  model formula
SB_formula <- type ~ red + green + blue + NIR + SWIR1 + SWIR2

# Train decision tree
SB_decision_tree <- rpart(formula = SB_formula,
                          data = SB_training_data,
                          method = "class",
                          na.action = na.omit)

# Plot decision tree
prp(SB_decision_tree)
```

## Classify image

```{r}
# Classify image based on decision tree
SB_classification <- terra::predict(landsat, SB_decision_tree, type = "class", na.rm = TRUE)

# Inspect level to understand the order of classes in prediction
levels(SB_training_data$type)
levels(SB_classification)
```

## Plot results

```{r}
tm_shape(SB_classification) +
  tm_raster(palette = c("#8DB580", "#F2DDA4", "#7E8987", "#6A8EAE"),
            labels = c("green vegetation", "soil/dead grass", "urban", "water"),
            title = "Landcover type") +
  tm_layout(legend.position = c("left", "BOTTOM"),
            main.title = "Santa Barbara Landcover")

```



